name: 'aksdeploy'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # defaults:
    #   run:
    #     shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }} # This doesn't have to be a secret. Client IDs are not sensitive.
        ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: "2fae94b1-7a9f-489c-bf7c-877563309b5c"
        ARM_TENANT_ID: "92df0fcf-acf6-4e0b-86ab-9fe4a46f8733"
      working-directory: ./AKS2/cluster
      shell: bash

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -input=false -no-color -out tf.plan
      env:
        ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }} 
        ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: "2fae94b1-7a9f-489c-bf7c-877563309b5c"
        ARM_TENANT_ID: "92df0fcf-acf6-4e0b-86ab-9fe4a46f8733"
      working-directory: ./AKS2/cluster # Use your environment folder
      shell: bash
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -input=false tf.plan
      env:
        ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }} 
        ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: "2fae94b1-7a9f-489c-bf7c-877563309b5c"
        ARM_TENANT_ID: "92df0fcf-acf6-4e0b-86ab-9fe4a46f8733"
      working-directory: ./AKS2/cluster # Use your environment folder
      shell: bash